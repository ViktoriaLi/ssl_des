m = 1 35 69 103 137 171 205 239+
m first shift = 204 0 204 255 240 170 240 170+

right E 48 = 122 21 85 122 21 85+
right after XOR 48 = 97 23 186 134 101 39+
right after XOR 64 = 24 17 30 58 33 38 20 39!!!+
s output = 5 12 8 2 11 5 9 7+
right after XOR S = 92 130 181 151+
right after P permutation = 35 74 169 187 +
left after XOR = 239 74 101 68
left 16 = 67 66 50 52
right 16 = 10 76 217 149

k64 = 19 52 87 121 155 188 223 241+
k56 = 240 204 170 245 86 103 143+
k1 shift = 225 153 85 250 172 207 30+
k2 shift = 195 50 171 245 89 158 61+
k3 shift = 12 202 175 245 102 120 245+
k16 shift = 240 204 170 245 86 103 143+
kf1 = 27 2 239 252 112 114+
kf16 = 203 61 139 14 23 245+

res64 bits after shift = 133 232 19 84 15 10 180 5

Example 2 http://bit.nmu.org.ua/ua/student/metod/cryptology/лекция%206.pdf
m = 18 52 86 171 205 19 37 54+
m first shift = 20 167 214 120 24 202 24 173
r1 = 90 120 227 148+
l1 = 24 202 24 173
r2 = 74 18 16 246
l2 = 90 120 227 148+
r3 = 184 8 149 145
l3 = 74 18 16 246

r16 = 207 38 180 114
l16 = 25 186 146 18

k1 = 25 76 208 114 222 140
k2 = 69 104 88 26 188 206
k16 = 24 28 93 117 198 109

res64 bits after shift = 192 183 168 208 95 58 130 156

decryption
k1 = 24 28 93 117 198 109
k2 = 51 48 197 217 163 109
k15 =
k16 = 25 76 208 114 222 140
m = 192 183 168 208 95 58 130 156


L1 = R0
R1 = L0 + f(R0 , K1 )

L2 = R1
R2 = L1 + f(R1 , K2 )

L3 = R2
R3 = L2 + f(R2 , K3 )


example 3 cbc http://studbooks.net/2009665/informatika/rezhim#41

echo
echo "des-ecb -e -k 6162636461626364"
echo "foo bar" | ./a.out des-ecb -k 6162636461626364
echo
echo "97 145 119 64 166 154 109 117"
echo toto | ./a.out des-ecb -k 6162636461626364
echo
echo "127 45 247 90 228 110 100 45"
echo a | ./a.out des-ecb -k 6162636461626364
echo
echo "130 0 154 196 64 187 78 152"
echo bc | ./a.out des-ecb -k 6162636461626364
echo
echo "166 76 95 170 230 56 61 247"
echo efd | ./a.out des-ecb -k 6162636461626364
echo
echo "18 243 156 236 182 89 228 248"
echo hijk | ./a.out des-ecb -k 6162636461626364
echo
echo "237 2 144 136 155 148 193 62"
echo lmnop | ./a.out des-ecb -k 6162636461626364
echo
echo "15 9 22 160 18 23 125 223"
echo qrstyv | ./a.out des-ecb -k 6162636461626364
echo
echo "78 122 187 159 14 72 31 52"
echo wxwz123 | ./a.out des-ecb -k 6162636461626364
echo
echo "34 37 134 230 50 14 223 159"
echo 4567890Q | ./a.out des-ecb -k 6162636461626364
echo
echo "101 112 79 1 0 74 251 170 37 205 200 217 159 111 169 242"
echo WERTYUIOP | ./a.out des-ecb -k 6162636461626364
echo
echo "205 227 139 121 193 98 102 196 90 49 225 154 160 234 129 187"

void	ignore_whitespaces(t_args *params, int fd, int ret, int j)
{
	t_addition iters;

	clear_iterators(&iters);
	if (j == -1)
		j = 0;
	while ((*params).b64_buf[iters.i] != '\0' && iters.i < ret)
	{
		if ((*params).b64_buf[iters.i] != ' ')
		{
			(*params).tmpad[j++] = (*params).b64_buf[iters.i++];
		}
		else
			iters.i++;
	}
	if (iters.i != ret && ret < 64)
	{
		iters.m = 0;
		while (iters.m < ret)
			(*params).b64_buf[iters.m++] = 0;
		iters.k = read(fd, params, ret - iters.i);
		ignore_whitespaces(params, fd, iters.k, j);
	}
	else
		return ;
}

void	b64_remove_whitespaces(t_args *params, int len, int fd, int ret)
{
	int i;

	i = 0;
	if (len == 64)
	{
		ignore_whitespaces(params, fd, ret, 0);
		if ((*params).tmpad[0] != 0)
		{
			while ((*params).tmpad[i])
			{
				(*params).b64_buf[i] = (*params).tmpad[i];
				i++;
			}
			while (i < len)
				(*params).b64_buf[i++] = 0;
			i = 0;
			while (i < len)
				(*params).tmpad[i++] = 0;
		}
	}
}

void	base64_reading(int fd, t_args *params, int len)
{
	t_addition				iters;

	clear_iterators(&iters);
	while ((iters.k = read(fd, &params->b64_buf, len)) > 0)
	{

		iters.i = 0;
		(*params).b64_buf[64] = 0;
		//b64_remove_whitespaces(params, len, fd, iters.k);
		ft_printf("%s\n", (*params).b64_buf);
		if (find_symb((*params).flags, 'd', FLAG_LEN) >= 0)
			make_short_blocks(params, iters.k, 4, (*params).b64_buf);
		else
			make_short_blocks(params, iters.k, 3, (*params).b64_buf);
		iters.i = 0;
		while (iters.i < iters.k)
			(*params).b64_buf[iters.i++] = 0;
		if (iters.k == 64 && (find_symb((*params).flags, 'd', FLAG_LEN)) < 0
			&& (find_symb((*params).flags, 'o', FLAG_LEN)) >= 0)
			write((*params).ofd, "\n", 1);
		else if (iters.k == 64 && (find_symb((*params).flags, 'd', FLAG_LEN)) < 0 &&
		(find_symb((*params).flags, 'o', FLAG_LEN)) < 0)
			write(1, "\n", 1);
	}
}

снова пропал игнор пробелов
